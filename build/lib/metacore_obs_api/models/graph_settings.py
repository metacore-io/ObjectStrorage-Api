# coding: utf-8

"""
    Metacore IOT Object Storage API

    Metacore IOT Core Services  # noqa: E501

    The version of the OpenAPI document: 0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GraphSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'is_default': 'bool',
        'name': 'str',
        'organization_id': 'str',
        'query': 'str',
        'user_id': 'str',
        'widget_id': 'str'
    }

    attribute_map = {
        'id': '_id',
        'is_default': 'is_default',
        'name': 'name',
        'organization_id': 'organizationId',
        'query': 'query',
        'user_id': 'user_id',
        'widget_id': 'widgetId'
    }

    def __init__(self, id=None, is_default=False, name=None, organization_id=None, query=None, user_id=None, widget_id=None):  # noqa: E501
        """GraphSettings - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._is_default = None
        self._name = None
        self._organization_id = None
        self._query = None
        self._user_id = None
        self._widget_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        self.name = name
        self.organization_id = organization_id
        self.query = query
        self.user_id = user_id
        if widget_id is not None:
            self.widget_id = widget_id

    @property
    def id(self):
        """Gets the id of this GraphSettings.  # noqa: E501


        :return: The id of this GraphSettings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GraphSettings.


        :param id: The id of this GraphSettings.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this GraphSettings.  # noqa: E501


        :return: The is_default of this GraphSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this GraphSettings.


        :param is_default: The is_default of this GraphSettings.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this GraphSettings.  # noqa: E501


        :return: The name of this GraphSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GraphSettings.


        :param name: The name of this GraphSettings.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 20:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `20`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this GraphSettings.  # noqa: E501


        :return: The organization_id of this GraphSettings.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this GraphSettings.


        :param organization_id: The organization_id of this GraphSettings.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def query(self):
        """Gets the query of this GraphSettings.  # noqa: E501


        :return: The query of this GraphSettings.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GraphSettings.


        :param query: The query of this GraphSettings.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def user_id(self):
        """Gets the user_id of this GraphSettings.  # noqa: E501


        :return: The user_id of this GraphSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GraphSettings.


        :param user_id: The user_id of this GraphSettings.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def widget_id(self):
        """Gets the widget_id of this GraphSettings.  # noqa: E501


        :return: The widget_id of this GraphSettings.  # noqa: E501
        :rtype: str
        """
        return self._widget_id

    @widget_id.setter
    def widget_id(self, widget_id):
        """Sets the widget_id of this GraphSettings.


        :param widget_id: The widget_id of this GraphSettings.  # noqa: E501
        :type: str
        """

        self._widget_id = widget_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
