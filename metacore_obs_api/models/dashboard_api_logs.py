# coding: utf-8

"""
    Metacore IOT Object Storage API

    Metacore IOT Core Services  # noqa: E501

    The version of the OpenAPI document: 0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DashboardApiLogs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'details': 'str',
        'event_type': 'str',
        'ip': 'str',
        'notes': 'str',
        'organization_id': 'str',
        'source': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'id': '_id',
        'details': 'details',
        'event_type': 'event_type',
        'ip': 'ip',
        'notes': 'notes',
        'organization_id': 'organizationId',
        'source': 'source',
        'user_id': 'user_id'
    }

    def __init__(self, id=None, details=None, event_type=None, ip=None, notes=None, organization_id=None, source=None, user_id=None):  # noqa: E501
        """DashboardApiLogs - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._details = None
        self._event_type = None
        self._ip = None
        self._notes = None
        self._organization_id = None
        self._source = None
        self._user_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.details = details
        self.event_type = event_type
        self.ip = ip
        self.notes = notes
        if organization_id is not None:
            self.organization_id = organization_id
        self.source = source
        self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this DashboardApiLogs.  # noqa: E501


        :return: The id of this DashboardApiLogs.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardApiLogs.


        :param id: The id of this DashboardApiLogs.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def details(self):
        """Gets the details of this DashboardApiLogs.  # noqa: E501


        :return: The details of this DashboardApiLogs.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DashboardApiLogs.


        :param details: The details of this DashboardApiLogs.  # noqa: E501
        :type: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def event_type(self):
        """Gets the event_type of this DashboardApiLogs.  # noqa: E501


        :return: The event_type of this DashboardApiLogs.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this DashboardApiLogs.


        :param event_type: The event_type of this DashboardApiLogs.  # noqa: E501
        :type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        if event_type is not None and len(event_type) > 20:
            raise ValueError("Invalid value for `event_type`, length must be less than or equal to `20`")  # noqa: E501
        if event_type is not None and len(event_type) < 1:
            raise ValueError("Invalid value for `event_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._event_type = event_type

    @property
    def ip(self):
        """Gets the ip of this DashboardApiLogs.  # noqa: E501


        :return: The ip of this DashboardApiLogs.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this DashboardApiLogs.


        :param ip: The ip of this DashboardApiLogs.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def notes(self):
        """Gets the notes of this DashboardApiLogs.  # noqa: E501


        :return: The notes of this DashboardApiLogs.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DashboardApiLogs.


        :param notes: The notes of this DashboardApiLogs.  # noqa: E501
        :type: str
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")  # noqa: E501

        self._notes = notes

    @property
    def organization_id(self):
        """Gets the organization_id of this DashboardApiLogs.  # noqa: E501


        :return: The organization_id of this DashboardApiLogs.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DashboardApiLogs.


        :param organization_id: The organization_id of this DashboardApiLogs.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def source(self):
        """Gets the source of this DashboardApiLogs.  # noqa: E501


        :return: The source of this DashboardApiLogs.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DashboardApiLogs.


        :param source: The source of this DashboardApiLogs.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def user_id(self):
        """Gets the user_id of this DashboardApiLogs.  # noqa: E501


        :return: The user_id of this DashboardApiLogs.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DashboardApiLogs.


        :param user_id: The user_id of this DashboardApiLogs.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardApiLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
