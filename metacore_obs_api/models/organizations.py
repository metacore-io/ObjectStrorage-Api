# coding: utf-8

"""
    Metacore IOT Object Storage API

    Metacore IOT Core Services  # noqa: E501

    The version of the OpenAPI document: 0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Organizations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'address': 'str',
        'brand_name': 'str',
        'city': 'str',
        'description': 'str',
        'email': 'str',
        'gps_log_id': 'int',
        'is_active': 'bool',
        'name': 'str',
        'organization_id': 'str',
        'phone_number': 'str',
        'primary_contact_name': 'str',
        'setting_id': 'int',
        'tax_number': 'int',
        'tax_office': 'str'
    }

    attribute_map = {
        'id': '_id',
        'address': 'address',
        'brand_name': 'brandName',
        'city': 'city',
        'description': 'description',
        'email': 'email',
        'gps_log_id': 'gpsLogId',
        'is_active': 'isActive',
        'name': 'name',
        'organization_id': 'organizationId',
        'phone_number': 'phoneNumber',
        'primary_contact_name': 'primaryContactName',
        'setting_id': 'settingId',
        'tax_number': 'taxNumber',
        'tax_office': 'taxOffice'
    }

    def __init__(self, id=None, address=None, brand_name=None, city=None, description=None, email=None, gps_log_id=None, is_active=None, name=None, organization_id=None, phone_number=None, primary_contact_name=None, setting_id=None, tax_number=None, tax_office=None):  # noqa: E501
        """Organizations - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._address = None
        self._brand_name = None
        self._city = None
        self._description = None
        self._email = None
        self._gps_log_id = None
        self._is_active = None
        self._name = None
        self._organization_id = None
        self._phone_number = None
        self._primary_contact_name = None
        self._setting_id = None
        self._tax_number = None
        self._tax_office = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.address = address
        self.brand_name = brand_name
        self.city = city
        self.description = description
        self.email = email
        if gps_log_id is not None:
            self.gps_log_id = gps_log_id
        self.is_active = is_active
        self.name = name
        if organization_id is not None:
            self.organization_id = organization_id
        self.phone_number = phone_number
        self.primary_contact_name = primary_contact_name
        if setting_id is not None:
            self.setting_id = setting_id
        self.tax_number = tax_number
        self.tax_office = tax_office

    @property
    def id(self):
        """Gets the id of this Organizations.  # noqa: E501


        :return: The id of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organizations.


        :param id: The id of this Organizations.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def address(self):
        """Gets the address of this Organizations.  # noqa: E501


        :return: The address of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Organizations.


        :param address: The address of this Organizations.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def brand_name(self):
        """Gets the brand_name of this Organizations.  # noqa: E501


        :return: The brand_name of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this Organizations.


        :param brand_name: The brand_name of this Organizations.  # noqa: E501
        :type: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")  # noqa: E501

        self._brand_name = brand_name

    @property
    def city(self):
        """Gets the city of this Organizations.  # noqa: E501


        :return: The city of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Organizations.


        :param city: The city of this Organizations.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def description(self):
        """Gets the description of this Organizations.  # noqa: E501


        :return: The description of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organizations.


        :param description: The description of this Organizations.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def email(self):
        """Gets the email of this Organizations.  # noqa: E501


        :return: The email of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Organizations.


        :param email: The email of this Organizations.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def gps_log_id(self):
        """Gets the gps_log_id of this Organizations.  # noqa: E501


        :return: The gps_log_id of this Organizations.  # noqa: E501
        :rtype: int
        """
        return self._gps_log_id

    @gps_log_id.setter
    def gps_log_id(self, gps_log_id):
        """Sets the gps_log_id of this Organizations.


        :param gps_log_id: The gps_log_id of this Organizations.  # noqa: E501
        :type: int
        """

        self._gps_log_id = gps_log_id

    @property
    def is_active(self):
        """Gets the is_active of this Organizations.  # noqa: E501


        :return: The is_active of this Organizations.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Organizations.


        :param is_active: The is_active of this Organizations.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this Organizations.  # noqa: E501


        :return: The name of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organizations.


        :param name: The name of this Organizations.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this Organizations.  # noqa: E501


        :return: The organization_id of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Organizations.


        :param organization_id: The organization_id of this Organizations.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def phone_number(self):
        """Gets the phone_number of this Organizations.  # noqa: E501


        :return: The phone_number of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Organizations.


        :param phone_number: The phone_number of this Organizations.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def primary_contact_name(self):
        """Gets the primary_contact_name of this Organizations.  # noqa: E501


        :return: The primary_contact_name of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._primary_contact_name

    @primary_contact_name.setter
    def primary_contact_name(self, primary_contact_name):
        """Sets the primary_contact_name of this Organizations.


        :param primary_contact_name: The primary_contact_name of this Organizations.  # noqa: E501
        :type: str
        """
        if primary_contact_name is None:
            raise ValueError("Invalid value for `primary_contact_name`, must not be `None`")  # noqa: E501

        self._primary_contact_name = primary_contact_name

    @property
    def setting_id(self):
        """Gets the setting_id of this Organizations.  # noqa: E501


        :return: The setting_id of this Organizations.  # noqa: E501
        :rtype: int
        """
        return self._setting_id

    @setting_id.setter
    def setting_id(self, setting_id):
        """Sets the setting_id of this Organizations.


        :param setting_id: The setting_id of this Organizations.  # noqa: E501
        :type: int
        """

        self._setting_id = setting_id

    @property
    def tax_number(self):
        """Gets the tax_number of this Organizations.  # noqa: E501


        :return: The tax_number of this Organizations.  # noqa: E501
        :rtype: int
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this Organizations.


        :param tax_number: The tax_number of this Organizations.  # noqa: E501
        :type: int
        """
        if tax_number is None:
            raise ValueError("Invalid value for `tax_number`, must not be `None`")  # noqa: E501

        self._tax_number = tax_number

    @property
    def tax_office(self):
        """Gets the tax_office of this Organizations.  # noqa: E501


        :return: The tax_office of this Organizations.  # noqa: E501
        :rtype: str
        """
        return self._tax_office

    @tax_office.setter
    def tax_office(self, tax_office):
        """Sets the tax_office of this Organizations.


        :param tax_office: The tax_office of this Organizations.  # noqa: E501
        :type: str
        """
        if tax_office is None:
            raise ValueError("Invalid value for `tax_office`, must not be `None`")  # noqa: E501

        self._tax_office = tax_office

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organizations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
